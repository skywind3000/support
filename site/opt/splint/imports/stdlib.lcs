%PASSED Output from LCLint 2.0
%LCLimports 
%LCLSortTable
%LCLsort bool immutable nil nil
%LCLsort Bool synonym bool nil
%LCLsort int primitive nil nil
%LCLsort char primitive nil nil
%LCLsort void primitive nil nil
%LCLsort _char_Obj obj char nil
%LCLsort __char_Obj_Ptr ptr _char_Obj nil
%LCLsort __char_Obj_Arr arr _char_Obj nil
%LCLsort _char_Vec vec char __char_Obj_Arr
%LCLsort float primitive nil nil
%LCLsort double primitive nil nil
%LCLsort _size_t synonym int nil
%LCLsort _wchar_t synonym int nil
%LCLsort _sstdlib0s_Struct str sstdlib0s nil
%LCLsort rem strMem _int_Obj nil
%LCLsort quot strMem _int_Obj nil
%LCLsort strEnd nil nil nil
%LCLsort _int_Obj obj int nil
%LCLsort _sstdlib0s_Struct_Tuple tup _sstdlib0s_Struct nil
%LCLsort __sstdlib0s_Struct_Ptr ptr _sstdlib0s_Struct nil
%LCLsort __sstdlib0s_Struct_Arr arr _sstdlib0s_Struct nil
%LCLsort __sstdlib0s_Struct_Tuple_Vec vec _sstdlib0s_Struct_Tuple __sstdlib0s_Struct_Arr
%LCLsort _div_t synonym _sstdlib0s_Struct nil
%LCLsort _sstdlib1s_Struct str sstdlib1s nil
%LCLsort rem strMem _int_Obj nil
%LCLsort quot strMem _int_Obj nil
%LCLsort strEnd nil nil nil
%LCLsort _sstdlib1s_Struct_Tuple tup _sstdlib1s_Struct nil
%LCLsort __sstdlib1s_Struct_Ptr ptr _sstdlib1s_Struct nil
%LCLsort __sstdlib1s_Struct_Arr arr _sstdlib1s_Struct nil
%LCLsort __sstdlib1s_Struct_Tuple_Vec vec _sstdlib1s_Struct_Tuple __sstdlib1s_Struct_Arr
%LCLsort _ldiv_t synonym _sstdlib1s_Struct nil
%LCLsort _void_Obj obj void nil
%LCLsort __void_Obj_Ptr ptr _void_Obj nil
%LCLsort __void_Obj_Arr arr _void_Obj nil
%LCLsort _void_Vec vec void __void_Obj_Arr
%LCLsort _HOF_sort_32 hof nil nil
%LCLsort _HOF_sort_33 hof nil nil
%LCLsort __int_Obj_Ptr ptr _int_Obj nil
%LCLsort __int_Obj_Arr arr _int_Obj nil
%LCLsort _int_Vec vec int __int_Obj_Arr
%LCLsort _HOF_sort_37 hof nil nil
%LCLsort ___char_Obj_Ptr_Obj obj __char_Obj_Ptr nil
%LCLsort ____char_Obj_Ptr_Obj_Ptr ptr ___char_Obj_Ptr_Obj nil
%LCLsort ____char_Obj_Ptr_Obj_Arr arr ___char_Obj_Ptr_Obj nil
%LCLsort ___char_Obj_Ptr_Vec vec __char_Obj_Ptr ____char_Obj_Ptr_Obj_Arr
%LCLSortTableEnd
%LCLSymbolTable
%LCLop mod :int, int -> int
%LCLop min :int, int -> int
%LCLop max :int, int -> int
%LCLop 0 : -> int
%LCLop 0 : -> double
%LCLop 1 : -> int
%LCLop 1 : -> double
%LCLop if __ then __ else __  :bool, bool, bool -> bool
%LCLop if __ then __ else __  :bool, int, int -> int
%LCLop if __ then __ else __  :bool, double, double -> double
%LCLop if __ then __ else __  :bool, _char_Vec, _char_Vec -> _char_Vec
%LCLop if __ then __ else __  :bool, char, char -> char
%LCLop __ < __  :int, int -> bool
%LCLop __ < __  :double, double -> bool
%LCLop empty : -> _char_Vec
%LCLop __ > __  :int, int -> bool
%LCLop __ > __  :double, double -> bool
%LCLop count :char, _char_Vec -> int
%LCLop head :_char_Vec -> char
%LCLop __ \inv :double -> double
%LCLop init :_char_Vec -> _char_Vec
%LCLop isEmpty :_char_Vec -> bool
%LCLop last :_char_Vec -> char
%LCLop len :_char_Vec -> int
%LCLop __ \implies __  :bool, bool -> bool
%LCLop prefix :_char_Vec, int -> _char_Vec
%LCLop __ / __  :double, double -> double
%LCLop removePrefix :_char_Vec, int -> _char_Vec
%LCLop substring :_char_Vec, int, int -> _char_Vec
%LCLop __ || __  :_char_Vec, _char_Vec -> _char_Vec
%LCLop tail :_char_Vec -> _char_Vec
%LCLop __ \in __  :char, _char_Vec -> bool
%LCLop nullTerminated :_char_Vec -> bool
%LCLop throughNull :_char_Vec -> _char_Vec
%LCLop sameStr :_char_Vec, _char_Vec -> bool
%LCLop lenStr :_char_Vec -> int
%LCLop times10plus :int, int -> int
%LCLop plus1 :int -> int
%LCLop 2 : -> int
%LCLop 3 : -> int
%LCLop 4 : -> int
%LCLop 5 : -> int
%LCLop 6 : -> int
%LCLop 7 : -> int
%LCLop 8 : -> int
%LCLop 9 : -> int
%LCLop __ * __  :int, int -> int
%LCLop __ * __  :double, double -> double
%LCLop true : -> bool
%LCLop false : -> bool
%LCLop __ \and __  :bool, bool -> bool
%LCLop __ \or __  :bool, bool -> bool
%LCLop __ \eq __  :bool, bool -> bool
%LCLop __ \eq __  :int, int -> bool
%LCLop __ \eq __  :double, double -> bool
%LCLop __ \eq __  :_char_Vec, _char_Vec -> bool
%LCLop __ \eq __  :char, char -> bool
%LCLop \not __  :bool -> bool
%LCLop __ \neq __  :bool, bool -> bool
%LCLop __ \neq __  :int, int -> bool
%LCLop __ \neq __  :double, double -> bool
%LCLop __ \neq __  :_char_Vec, _char_Vec -> bool
%LCLop __ \neq __  :char, char -> bool
%LCLop { __ } :char -> _char_Vec
%LCLop [__, __] :int, int -> _sstdlib0s_Struct_Tuple
%LCLop [__, __] :int, int -> _sstdlib1s_Struct_Tuple
%LCLop __ [] :__char_Obj_Ptr -> __char_Obj_Arr
%LCLop __ [] :__sstdlib0s_Struct_Ptr -> __sstdlib0s_Struct_Arr
%LCLop __ [] :__sstdlib1s_Struct_Ptr -> __sstdlib1s_Struct_Arr
%LCLop __ [] :__void_Obj_Ptr -> __void_Obj_Arr
%LCLop __ [] :__int_Obj_Ptr -> __int_Obj_Arr
%LCLop __ [] :____char_Obj_Ptr_Obj_Ptr -> ____char_Obj_Ptr_Obj_Arr
%LCLop __ [__] :_char_Vec, int -> char
%LCLop __ [__] :__char_Obj_Arr, int -> _char_Obj
%LCLop __ [__] :__sstdlib0s_Struct_Tuple_Vec, int -> _sstdlib0s_Struct_Tuple
%LCLop __ [__] :__sstdlib0s_Struct_Arr, int -> _sstdlib0s_Struct
%LCLop __ [__] :__sstdlib1s_Struct_Tuple_Vec, int -> _sstdlib1s_Struct_Tuple
%LCLop __ [__] :__sstdlib1s_Struct_Arr, int -> _sstdlib1s_Struct
%LCLop __ [__] :_void_Vec, int -> void
%LCLop __ [__] :__void_Obj_Arr, int -> _void_Obj
%LCLop __ [__] :_int_Vec, int -> int
%LCLop __ [__] :__int_Obj_Arr, int -> _int_Obj
%LCLop __ [__] :___char_Obj_Ptr_Vec, int -> __char_Obj_Ptr
%LCLop __ [__] :____char_Obj_Ptr_Obj_Arr, int -> ___char_Obj_Ptr_Obj
%LCLop __ |- __  :_char_Vec, char -> _char_Vec
%LCLop __ -| __  :char, _char_Vec -> _char_Vec
%LCLop __ \select quot :_sstdlib0s_Struct_Tuple -> int
%LCLop __ \select quot :_sstdlib0s_Struct -> _int_Obj
%LCLop __ \select quot :_sstdlib1s_Struct_Tuple -> int
%LCLop __ \select quot :_sstdlib1s_Struct -> _int_Obj
%LCLop __ \select rem :_sstdlib0s_Struct_Tuple -> int
%LCLop __ \select rem :_sstdlib0s_Struct -> _int_Obj
%LCLop __ \select rem :_sstdlib1s_Struct_Tuple -> int
%LCLop __ \select rem :_sstdlib1s_Struct -> _int_Obj
%LCLop __ \field_arrow quot :__sstdlib0s_Struct_Ptr -> _int_Obj
%LCLop __ \field_arrow quot :__sstdlib1s_Struct_Ptr -> _int_Obj
%LCLop __ \field_arrow rem :__sstdlib0s_Struct_Ptr -> _int_Obj
%LCLop __ \field_arrow rem :__sstdlib1s_Struct_Ptr -> _int_Obj
%LCLop __ \leq __  :int, int -> bool
%LCLop __ \leq __  :double, double -> bool
%LCLop __ \geq __  :int, int -> bool
%LCLop __ \geq __  :double, double -> bool
%LCLop null : -> char
%LCLop NIL : -> __char_Obj_Ptr
%LCLop NIL : -> __sstdlib0s_Struct_Ptr
%LCLop NIL : -> __sstdlib1s_Struct_Ptr
%LCLop NIL : -> __void_Obj_Ptr
%LCLop NIL : -> __int_Obj_Ptr
%LCLop NIL : -> ____char_Obj_Ptr_Obj_Ptr
%LCLop - __  :int -> int
%LCLop - __  :double -> double
%LCLop __ + __  :__char_Obj_Ptr, int -> __char_Obj_Ptr
%LCLop __ + __  :int, __char_Obj_Ptr -> __char_Obj_Ptr
%LCLop __ + __  :int, int -> int
%LCLop __ + __  :double, double -> double
%LCLop __ + __  :__sstdlib0s_Struct_Ptr, int -> __sstdlib0s_Struct_Ptr
%LCLop __ + __  :int, __sstdlib0s_Struct_Ptr -> __sstdlib0s_Struct_Ptr
%LCLop __ + __  :__sstdlib1s_Struct_Ptr, int -> __sstdlib1s_Struct_Ptr
%LCLop __ + __  :int, __sstdlib1s_Struct_Ptr -> __sstdlib1s_Struct_Ptr
%LCLop __ + __  :__void_Obj_Ptr, int -> __void_Obj_Ptr
%LCLop __ + __  :int, __void_Obj_Ptr -> __void_Obj_Ptr
%LCLop __ + __  :__int_Obj_Ptr, int -> __int_Obj_Ptr
%LCLop __ + __  :int, __int_Obj_Ptr -> __int_Obj_Ptr
%LCLop __ + __  :____char_Obj_Ptr_Obj_Ptr, int -> ____char_Obj_Ptr_Obj_Ptr
%LCLop __ + __  :int, ____char_Obj_Ptr_Obj_Ptr -> ____char_Obj_Ptr_Obj_Ptr
%LCLop __ - __  :__char_Obj_Ptr, int -> __char_Obj_Ptr
%LCLop __ - __  :__char_Obj_Ptr, __char_Obj_Ptr -> int
%LCLop __ - __  :int, int -> int
%LCLop __ - __  :double, double -> double
%LCLop __ - __  :__sstdlib0s_Struct_Ptr, int -> __sstdlib0s_Struct_Ptr
%LCLop __ - __  :__sstdlib0s_Struct_Ptr, __sstdlib0s_Struct_Ptr -> int
%LCLop __ - __  :__sstdlib1s_Struct_Ptr, int -> __sstdlib1s_Struct_Ptr
%LCLop __ - __  :__sstdlib1s_Struct_Ptr, __sstdlib1s_Struct_Ptr -> int
%LCLop __ - __  :__void_Obj_Ptr, int -> __void_Obj_Ptr
%LCLop __ - __  :__void_Obj_Ptr, __void_Obj_Ptr -> int
%LCLop __ - __  :__int_Obj_Ptr, int -> __int_Obj_Ptr
%LCLop __ - __  :__int_Obj_Ptr, __int_Obj_Ptr -> int
%LCLop __ - __  :____char_Obj_Ptr_Obj_Ptr, int -> ____char_Obj_Ptr_Obj_Ptr
%LCLop __ - __  :____char_Obj_Ptr_Obj_Ptr, ____char_Obj_Ptr_Obj_Ptr -> int
%LCLop sizeof :bool -> int
%LCLop sizeof :int -> int
%LCLop sizeof :char -> int
%LCLop sizeof :void -> int
%LCLop sizeof :float -> int
%LCLop sizeof :double -> int
%LCLop isSub :_char_Vec, int -> bool
%LCLop isSub :__char_Obj_Arr, int -> bool
%LCLop isSub :__sstdlib0s_Struct_Tuple_Vec, int -> bool
%LCLop isSub :__sstdlib0s_Struct_Arr, int -> bool
%LCLop isSub :__sstdlib1s_Struct_Tuple_Vec, int -> bool
%LCLop isSub :__sstdlib1s_Struct_Arr, int -> bool
%LCLop isSub :_void_Vec, int -> bool
%LCLop isSub :__void_Obj_Arr, int -> bool
%LCLop isSub :_int_Vec, int -> bool
%LCLop isSub :__int_Obj_Arr, int -> bool
%LCLop isSub :___char_Obj_Ptr_Vec, int -> bool
%LCLop isSub :____char_Obj_Ptr_Obj_Arr, int -> bool
%LCLop succ :int -> int
%LCLop pred :int -> int
%LCLop abs :int -> int
%LCLop abs :double -> double
%LCLop div :int, int -> int
%LCLtype float float exposed
%LCLtype bool bool immutable
%LCLconst FALSE bool
%LCLconst TRUE bool
%LCLtype size_t _size_t exposed
%LCLtype wchar_t _wchar_t exposed
%LCLtype div_t _div_t exposed
%LCLtype ldiv_t _ldiv_t exposed
%LCLconst NULL __void_Obj_Ptr
%LCLconst EXIT_FAILURE int
%LCLconst EXIT_SUCCESS int
%LCLconst RAND_MAX int
%LCLconst MB_CUR_MAX int
%LCLfcn abort :  -> void 
%LCLfcnGlobals 
%LCLfcn abs : int -> int 
%LCLfcnGlobals 
%LCLfcn atexit : _HOF_sort_32 -> int 
%LCLfcnGlobals 
%LCLfcn atof : __char_Obj_Ptr -> double 
%LCLfcnGlobals 
%LCLfcn atoi : __char_Obj_Ptr -> int 
%LCLfcnGlobals 
%LCLfcn atol : __char_Obj_Ptr -> int 
%LCLfcnGlobals 
%LCLfcn bsearch : __void_Obj_Ptr, __void_Obj_Ptr, int, int, _HOF_sort_33 -> __void_Obj_Ptr 
%LCLfcnGlobals 
%LCLfcn calloc : int, int -> __void_Obj_Ptr 
%LCLfcnGlobals 
%LCLfcn div : int, int -> _sstdlib0s_Struct 
%LCLfcnGlobals 
%LCLfcn exit : int -> void 
%LCLfcnGlobals 
%LCLfcn free : __void_Obj_Ptr -> void 
%LCLfcnGlobals 
%LCLfcn getenv : __char_Obj_Ptr -> __char_Obj_Ptr 
%LCLfcnGlobals 
%LCLfcn labs : int -> int 
%LCLfcnGlobals 
%LCLfcn ldiv : int, int -> _sstdlib1s_Struct 
%LCLfcnGlobals 
%LCLfcn malloc : int -> __void_Obj_Ptr 
%LCLfcnGlobals 
%LCLfcn mblen : __char_Obj_Ptr, int -> int 
%LCLfcnGlobals 
%LCLfcn mbstowcs : __int_Obj_Ptr, __char_Obj_Ptr, int -> int 
%LCLfcnGlobals 
%LCLfcn mbtowc : __int_Obj_Ptr, __char_Obj_Ptr, int -> int 
%LCLfcnGlobals 
%LCLfcn qsort : __void_Obj_Ptr, int, int, _HOF_sort_37 -> void 
%LCLfcnGlobals 
%LCLfcn rand :  -> int 
%LCLfcnGlobals 
%LCLfcn realloc : __void_Obj_Ptr, int -> __void_Obj_Ptr 
%LCLfcnGlobals 
%LCLfcn srand : int -> void 
%LCLfcnGlobals 
%LCLfcn strtod : __char_Obj_Ptr, ____char_Obj_Ptr_Obj_Ptr -> double 
%LCLfcnGlobals 
%LCLfcn strtol : __char_Obj_Ptr, ____char_Obj_Ptr_Obj_Ptr, int -> int 
%LCLfcnGlobals 
%LCLfcn strtoul : __char_Obj_Ptr, ____char_Obj_Ptr_Obj_Ptr, int -> int 
%LCLfcnGlobals 
%LCLfcn system : __char_Obj_Ptr -> int 
%LCLfcnGlobals 
%LCLfcn wcstombs : __char_Obj_Ptr, __int_Obj_Ptr, int -> int 
%LCLfcnGlobals 
%LCLfcn wctomb : __char_Obj_Ptr, int -> int 
%LCLfcnGlobals 
%LCLfcn bcopy : __char_Obj_Ptr, __char_Obj_Ptr, int -> void 
%LCLfcnGlobals 
%LCLfcn bcmp : __char_Obj_Ptr, __char_Obj_Ptr, int -> bool 
%LCLfcnGlobals 
%LCLfcn bzero : __char_Obj_Ptr, int -> void 
%LCLfcnGlobals 
%LCLfcn ffs : int -> int 
%LCLfcnGlobals 
%LCLfcn memccpy : __void_Obj_Ptr, __void_Obj_Ptr, int, int -> __void_Obj_Ptr 
%LCLfcnGlobals 
%LCLfcn memchr : __void_Obj_Ptr, int, int -> __void_Obj_Ptr 
%LCLfcnGlobals 
%LCLfcn memcmp : __void_Obj_Ptr, __void_Obj_Ptr, int -> bool 
%LCLfcnGlobals 
%LCLfcn memcpy : __void_Obj_Ptr, __void_Obj_Ptr, int -> __void_Obj_Ptr 
%LCLfcnGlobals 
%LCLfcn memset : __void_Obj_Ptr, int, int -> __void_Obj_Ptr 
%LCLfcnGlobals 
%LCLfcn memmove : __void_Obj_Ptr, __void_Obj_Ptr, int -> __void_Obj_Ptr 
%LCLfcnGlobals 
%LCLSymbolTableEnd
