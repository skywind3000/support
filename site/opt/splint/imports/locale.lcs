%PASSED Output from LCLint 2.0
%LCLimports 
%LCLSortTable
%LCLsort bool immutable nil nil
%LCLsort Bool synonym bool nil
%LCLsort int primitive nil nil
%LCLsort char primitive nil nil
%LCLsort void primitive nil nil
%LCLsort _char_Obj obj char nil
%LCLsort __char_Obj_Ptr ptr _char_Obj nil
%LCLsort __char_Obj_Arr arr _char_Obj nil
%LCLsort _char_Vec vec char __char_Obj_Arr
%LCLsort float primitive nil nil
%LCLsort double primitive nil nil
%LCLsort _eerrno0e_Enum enum eerrno0e nil
%LCLsort EDUPTOOMANYCPUS enumMem nil nil
%LCLsort EDUPINTRANSIT enumMem nil nil
%LCLsort EDUPBADOPCODE enumMem nil nil
%LCLsort EDUPNOTRUN enumMem nil nil
%LCLsort EDUPNOTWAIT enumMem nil nil
%LCLsort EDUPNOTIDLE enumMem nil nil
%LCLsort EDUPNOTCNTD enumMem nil nil
%LCLsort EDUPNODISCONN enumMem nil nil
%LCLsort EDUPNOCONN enumMem nil nil
%LCLsort ENODUST enumMem nil nil
%LCLsort ENOSYSTEM enumMem nil nil
%LCLsort ENORESOURCES enumMem nil nil
%LCLsort ENOACTIVE enumMem nil nil
%LCLsort EACTIVE enumMem nil nil
%LCLsort ENOSYS enumMem nil nil
%LCLsort ENOLCK enumMem nil nil
%LCLsort EDEADLK enumMem nil nil
%LCLsort EALIGN enumMem nil nil
%LCLsort EIDRM enumMem nil nil
%LCLsort ENOMSG enumMem nil nil
%LCLsort EREMOTE enumMem nil nil
%LCLsort ESTALE enumMem nil nil
%LCLsort EDQUOT enumMem nil nil
%LCLsort EUSERS enumMem nil nil
%LCLsort EPROCLIM enumMem nil nil
%LCLsort ENOTEMPTY enumMem nil nil
%LCLsort EHOSTUNREACH enumMem nil nil
%LCLsort EHOSTDOWN enumMem nil nil
%LCLsort ENAMETOOLONG enumMem nil nil
%LCLsort ELOOP enumMem nil nil
%LCLsort ECONNREFUSED enumMem nil nil
%LCLsort ETIMEDOUT enumMem nil nil
%LCLsort ETOOMANYREFS enumMem nil nil
%LCLsort ESHUTDOWN enumMem nil nil
%LCLsort ENOTCONN enumMem nil nil
%LCLsort EISCONN enumMem nil nil
%LCLsort ENOBUFS enumMem nil nil
%LCLsort ECONNRESET enumMem nil nil
%LCLsort ECONNABORTED enumMem nil nil
%LCLsort ENETRESET enumMem nil nil
%LCLsort ENETUNREACH enumMem nil nil
%LCLsort ENETDOWN enumMem nil nil
%LCLsort EADDRNOTAVAIL enumMem nil nil
%LCLsort EADDRINUSE enumMem nil nil
%LCLsort EAFNOSUPPORT enumMem nil nil
%LCLsort EPFNOSUPPORT enumMem nil nil
%LCLsort EOPNOTSUPP enumMem nil nil
%LCLsort ESOCKTNOSUPPORT enumMem nil nil
%LCLsort EPROTONOSUPPORT enumMem nil nil
%LCLsort ENOPROTOOPT enumMem nil nil
%LCLsort EPROTOTYPE enumMem nil nil
%LCLsort EMSGSIZE enumMem nil nil
%LCLsort EDESTADDRREQ enumMem nil nil
%LCLsort ENOTSOCK enumMem nil nil
%LCLsort EALREADY enumMem nil nil
%LCLsort EINPROGRESS enumMem nil nil
%LCLsort EWOULDBLOCK enumMem nil nil
%LCLsort ERANGE enumMem nil nil
%LCLsort EDOM enumMem nil nil
%LCLsort EPIPE enumMem nil nil
%LCLsort EMLINK enumMem nil nil
%LCLsort EROFS enumMem nil nil
%LCLsort ESPIPE enumMem nil nil
%LCLsort ENOSPC enumMem nil nil
%LCLsort EFBIG enumMem nil nil
%LCLsort ETXTBSY enumMem nil nil
%LCLsort ENOTTY enumMem nil nil
%LCLsort EMFILE enumMem nil nil
%LCLsort ENFILE enumMem nil nil
%LCLsort EINVAL enumMem nil nil
%LCLsort EISDIR enumMem nil nil
%LCLsort ENOTDIR enumMem nil nil
%LCLsort ENODEV enumMem nil nil
%LCLsort EXDEV enumMem nil nil
%LCLsort EEXIST enumMem nil nil
%LCLsort EBUSY enumMem nil nil
%LCLsort ENOTBLK enumMem nil nil
%LCLsort EFAULT enumMem nil nil
%LCLsort EACCES enumMem nil nil
%LCLsort ENOMEM enumMem nil nil
%LCLsort EAGAIN enumMem nil nil
%LCLsort ECHILD enumMem nil nil
%LCLsort EBADF enumMem nil nil
%LCLsort ENOEXEC enumMem nil nil
%LCLsort E2BIG enumMem nil nil
%LCLsort ENXIO enumMem nil nil
%LCLsort EIO enumMem nil nil
%LCLsort EINTR enumMem nil nil
%LCLsort ESRCH enumMem nil nil
%LCLsort ENOENT enumMem nil nil
%LCLsort EPERM enumMem nil nil
%LCLsort enumEnd nil nil nil
%LCLsort __eerrno0e_Enum_Obj obj _eerrno0e_Enum nil
%LCLsort _int_Obj obj int nil
%LCLsort _lconv_Struct str lconv nil
%LCLsort n_sign_posn strMem _char_Obj nil
%LCLsort p_sign_posn strMem _char_Obj nil
%LCLsort n_sep_by_space strMem _char_Obj nil
%LCLsort n_cs_precedes strMem _char_Obj nil
%LCLsort p_sep_by_space strMem _char_Obj nil
%LCLsort p_cs_precedes strMem _char_Obj nil
%LCLsort frac_digits strMem _char_Obj nil
%LCLsort int_frac_digits strMem _char_Obj nil
%LCLsort negative_sign strMem ___char_Obj_Ptr_Obj nil
%LCLsort positive_sign strMem ___char_Obj_Ptr_Obj nil
%LCLsort mon_grouping strMem ___char_Obj_Ptr_Obj nil
%LCLsort mon_thousands_sep strMem ___char_Obj_Ptr_Obj nil
%LCLsort mon_decimal_point strMem ___char_Obj_Ptr_Obj nil
%LCLsort currency_symbol strMem ___char_Obj_Ptr_Obj nil
%LCLsort int_curr_symbol strMem ___char_Obj_Ptr_Obj nil
%LCLsort grouping strMem ___char_Obj_Ptr_Obj nil
%LCLsort thousands_sep strMem ___char_Obj_Ptr_Obj nil
%LCLsort decimal_point strMem ___char_Obj_Ptr_Obj nil
%LCLsort strEnd nil nil nil
%LCLsort ___char_Obj_Ptr_Obj obj __char_Obj_Ptr nil
%LCLsort _lconv_Struct_Tuple tup _lconv_Struct nil
%LCLsort __lconv_Struct_Ptr ptr _lconv_Struct nil
%LCLsort __lconv_Struct_Arr arr _lconv_Struct nil
%LCLsort __lconv_Struct_Tuple_Vec vec _lconv_Struct_Tuple __lconv_Struct_Arr
%LCLsort ___lconv synonym _lconv_Struct nil
%LCLSortTableEnd
%LCLSymbolTable
%LCLop ENOMSG : -> _eerrno0e_Enum
%LCLop mod :int, int -> int
%LCLop EIDRM : -> _eerrno0e_Enum
%LCLop min :int, int -> int
%LCLop EALIGN : -> _eerrno0e_Enum
%LCLop max :int, int -> int
%LCLop EDEADLK : -> _eerrno0e_Enum
%LCLop 0 : -> int
%LCLop 0 : -> double
%LCLop ENOLCK : -> _eerrno0e_Enum
%LCLop 1 : -> int
%LCLop 1 : -> double
%LCLop if __ then __ else __  :bool, bool, bool -> bool
%LCLop if __ then __ else __  :bool, int, int -> int
%LCLop if __ then __ else __  :bool, double, double -> double
%LCLop if __ then __ else __  :bool, _char_Vec, _char_Vec -> _char_Vec
%LCLop if __ then __ else __  :bool, char, char -> char
%LCLop ENOSYS : -> _eerrno0e_Enum
%LCLop EACTIVE : -> _eerrno0e_Enum
%LCLop __ < __  :int, int -> bool
%LCLop __ < __  :double, double -> bool
%LCLop ENOACTIVE : -> _eerrno0e_Enum
%LCLop empty : -> _char_Vec
%LCLop __ > __  :int, int -> bool
%LCLop __ > __  :double, double -> bool
%LCLop ENORESOURCES : -> _eerrno0e_Enum
%LCLop ENOSYSTEM : -> _eerrno0e_Enum
%LCLop ENODUST : -> _eerrno0e_Enum
%LCLop count :char, _char_Vec -> int
%LCLop EDUPNOCONN : -> _eerrno0e_Enum
%LCLop head :_char_Vec -> char
%LCLop __ \inv :double -> double
%LCLop EDUPNODISCONN : -> _eerrno0e_Enum
%LCLop init :_char_Vec -> _char_Vec
%LCLop EDUPNOTCNTD : -> _eerrno0e_Enum
%LCLop isEmpty :_char_Vec -> bool
%LCLop EDUPNOTIDLE : -> _eerrno0e_Enum
%LCLop last :_char_Vec -> char
%LCLop EDUPNOTWAIT : -> _eerrno0e_Enum
%LCLop len :_char_Vec -> int
%LCLop __ \implies __  :bool, bool -> bool
%LCLop EDUPNOTRUN : -> _eerrno0e_Enum
%LCLop prefix :_char_Vec, int -> _char_Vec
%LCLop __ / __  :double, double -> double
%LCLop EDUPBADOPCODE : -> _eerrno0e_Enum
%LCLop removePrefix :_char_Vec, int -> _char_Vec
%LCLop EDUPINTRANSIT : -> _eerrno0e_Enum
%LCLop substring :_char_Vec, int, int -> _char_Vec
%LCLop __ || __  :_char_Vec, _char_Vec -> _char_Vec
%LCLop EDUPTOOMANYCPUS : -> _eerrno0e_Enum
%LCLop tail :_char_Vec -> _char_Vec
%LCLop __ \in __  :char, _char_Vec -> bool
%LCLop nullTerminated :_char_Vec -> bool
%LCLop throughNull :_char_Vec -> _char_Vec
%LCLop sameStr :_char_Vec, _char_Vec -> bool
%LCLop __ \select decimal_point :_lconv_Struct_Tuple -> __char_Obj_Ptr
%LCLop __ \select decimal_point :_lconv_Struct -> ___char_Obj_Ptr_Obj
%LCLop lenStr :_char_Vec -> int
%LCLop __ \select thousands_sep :_lconv_Struct_Tuple -> __char_Obj_Ptr
%LCLop __ \select thousands_sep :_lconv_Struct -> ___char_Obj_Ptr_Obj
%LCLop times10plus :int, int -> int
%LCLop __ \field_arrow decimal_point :__lconv_Struct_Ptr -> ___char_Obj_Ptr_Obj
%LCLop __ \select grouping :_lconv_Struct_Tuple -> __char_Obj_Ptr
%LCLop __ \select grouping :_lconv_Struct -> ___char_Obj_Ptr_Obj
%LCLop plus1 :int -> int
%LCLop __ \field_arrow thousands_sep :__lconv_Struct_Ptr -> ___char_Obj_Ptr_Obj
%LCLop __ \select int_curr_symbol :_lconv_Struct_Tuple -> __char_Obj_Ptr
%LCLop __ \select int_curr_symbol :_lconv_Struct -> ___char_Obj_Ptr_Obj
%LCLop 2 : -> int
%LCLop __ \field_arrow grouping :__lconv_Struct_Ptr -> ___char_Obj_Ptr_Obj
%LCLop __ \select currency_symbol :_lconv_Struct_Tuple -> __char_Obj_Ptr
%LCLop __ \select currency_symbol :_lconv_Struct -> ___char_Obj_Ptr_Obj
%LCLop 3 : -> int
%LCLop __ \field_arrow int_curr_symbol :__lconv_Struct_Ptr -> ___char_Obj_Ptr_Obj
%LCLop __ \select mon_decimal_point :_lconv_Struct_Tuple -> __char_Obj_Ptr
%LCLop __ \select mon_decimal_point :_lconv_Struct -> ___char_Obj_Ptr_Obj
%LCLop 4 : -> int
%LCLop __ \field_arrow currency_symbol :__lconv_Struct_Ptr -> ___char_Obj_Ptr_Obj
%LCLop __ \select mon_thousands_sep :_lconv_Struct_Tuple -> __char_Obj_Ptr
%LCLop __ \select mon_thousands_sep :_lconv_Struct -> ___char_Obj_Ptr_Obj
%LCLop 5 : -> int
%LCLop __ \field_arrow mon_decimal_point :__lconv_Struct_Ptr -> ___char_Obj_Ptr_Obj
%LCLop __ \select mon_grouping :_lconv_Struct_Tuple -> __char_Obj_Ptr
%LCLop __ \select mon_grouping :_lconv_Struct -> ___char_Obj_Ptr_Obj
%LCLop 6 : -> int
%LCLop __ \field_arrow mon_thousands_sep :__lconv_Struct_Ptr -> ___char_Obj_Ptr_Obj
%LCLop __ \select positive_sign :_lconv_Struct_Tuple -> __char_Obj_Ptr
%LCLop __ \select positive_sign :_lconv_Struct -> ___char_Obj_Ptr_Obj
%LCLop 7 : -> int
%LCLop __ \field_arrow mon_grouping :__lconv_Struct_Ptr -> ___char_Obj_Ptr_Obj
%LCLop __ \select negative_sign :_lconv_Struct_Tuple -> __char_Obj_Ptr
%LCLop __ \select negative_sign :_lconv_Struct -> ___char_Obj_Ptr_Obj
%LCLop 8 : -> int
%LCLop __ \field_arrow positive_sign :__lconv_Struct_Ptr -> ___char_Obj_Ptr_Obj
%LCLop __ \select int_frac_digits :_lconv_Struct_Tuple -> char
%LCLop __ \select int_frac_digits :_lconv_Struct -> _char_Obj
%LCLop 9 : -> int
%LCLop __ \field_arrow negative_sign :__lconv_Struct_Ptr -> ___char_Obj_Ptr_Obj
%LCLop __ \select frac_digits :_lconv_Struct_Tuple -> char
%LCLop __ \select frac_digits :_lconv_Struct -> _char_Obj
%LCLop __ \field_arrow int_frac_digits :__lconv_Struct_Ptr -> _char_Obj
%LCLop __ \select p_cs_precedes :_lconv_Struct_Tuple -> char
%LCLop __ \select p_cs_precedes :_lconv_Struct -> _char_Obj
%LCLop __ \field_arrow frac_digits :__lconv_Struct_Ptr -> _char_Obj
%LCLop __ \select p_sep_by_space :_lconv_Struct_Tuple -> char
%LCLop __ \select p_sep_by_space :_lconv_Struct -> _char_Obj
%LCLop __ \field_arrow p_cs_precedes :__lconv_Struct_Ptr -> _char_Obj
%LCLop __ \select n_cs_precedes :_lconv_Struct_Tuple -> char
%LCLop __ \select n_cs_precedes :_lconv_Struct -> _char_Obj
%LCLop __ \field_arrow p_sep_by_space :__lconv_Struct_Ptr -> _char_Obj
%LCLop __ \select n_sep_by_space :_lconv_Struct_Tuple -> char
%LCLop __ \select n_sep_by_space :_lconv_Struct -> _char_Obj
%LCLop __ \field_arrow n_cs_precedes :__lconv_Struct_Ptr -> _char_Obj
%LCLop __ \select p_sign_posn :_lconv_Struct_Tuple -> char
%LCLop __ \select p_sign_posn :_lconv_Struct -> _char_Obj
%LCLop __ \field_arrow n_sep_by_space :__lconv_Struct_Ptr -> _char_Obj
%LCLop __ \select n_sign_posn :_lconv_Struct_Tuple -> char
%LCLop __ \select n_sign_posn :_lconv_Struct -> _char_Obj
%LCLop __ \field_arrow p_sign_posn :__lconv_Struct_Ptr -> _char_Obj
%LCLop __ \field_arrow n_sign_posn :__lconv_Struct_Ptr -> _char_Obj
%LCLop __ * __  :int, int -> int
%LCLop __ * __  :double, double -> double
%LCLop true : -> bool
%LCLop false : -> bool
%LCLop __ \and __  :bool, bool -> bool
%LCLop __ \or __  :bool, bool -> bool
%LCLop __ \eq __  :bool, bool -> bool
%LCLop __ \eq __  :int, int -> bool
%LCLop __ \eq __  :double, double -> bool
%LCLop __ \eq __  :_char_Vec, _char_Vec -> bool
%LCLop __ \eq __  :char, char -> bool
%LCLop \not __  :bool -> bool
%LCLop __ \neq __  :bool, bool -> bool
%LCLop __ \neq __  :int, int -> bool
%LCLop __ \neq __  :double, double -> bool
%LCLop __ \neq __  :_char_Vec, _char_Vec -> bool
%LCLop __ \neq __  :char, char -> bool
%LCLop { __ } :char -> _char_Vec
%LCLop EPERM : -> _eerrno0e_Enum
%LCLop ENOENT : -> _eerrno0e_Enum
%LCLop ESRCH : -> _eerrno0e_Enum
%LCLop EINTR : -> _eerrno0e_Enum
%LCLop EIO : -> _eerrno0e_Enum
%LCLop ENXIO : -> _eerrno0e_Enum
%LCLop E2BIG : -> _eerrno0e_Enum
%LCLop ENOEXEC : -> _eerrno0e_Enum
%LCLop EBADF : -> _eerrno0e_Enum
%LCLop ECHILD : -> _eerrno0e_Enum
%LCLop EAGAIN : -> _eerrno0e_Enum
%LCLop __ [] :__char_Obj_Ptr -> __char_Obj_Arr
%LCLop __ [] :__lconv_Struct_Ptr -> __lconv_Struct_Arr
%LCLop ENOMEM : -> _eerrno0e_Enum
%LCLop EACCES : -> _eerrno0e_Enum
%LCLop __ [__] :_char_Vec, int -> char
%LCLop __ [__] :__char_Obj_Arr, int -> _char_Obj
%LCLop __ [__] :__lconv_Struct_Tuple_Vec, int -> _lconv_Struct_Tuple
%LCLop __ [__] :__lconv_Struct_Arr, int -> _lconv_Struct
%LCLop EFAULT : -> _eerrno0e_Enum
%LCLop __ |- __  :_char_Vec, char -> _char_Vec
%LCLop ENOTBLK : -> _eerrno0e_Enum
%LCLop EBUSY : -> _eerrno0e_Enum
%LCLop __ -| __  :char, _char_Vec -> _char_Vec
%LCLop EEXIST : -> _eerrno0e_Enum
%LCLop EXDEV : -> _eerrno0e_Enum
%LCLop ENODEV : -> _eerrno0e_Enum
%LCLop ENOTDIR : -> _eerrno0e_Enum
%LCLop __ \leq __  :int, int -> bool
%LCLop __ \leq __  :double, double -> bool
%LCLop EISDIR : -> _eerrno0e_Enum
%LCLop EINVAL : -> _eerrno0e_Enum
%LCLop __ \geq __  :int, int -> bool
%LCLop __ \geq __  :double, double -> bool
%LCLop ENFILE : -> _eerrno0e_Enum
%LCLop EMFILE : -> _eerrno0e_Enum
%LCLop ENOTTY : -> _eerrno0e_Enum
%LCLop ETXTBSY : -> _eerrno0e_Enum
%LCLop null : -> char
%LCLop EFBIG : -> _eerrno0e_Enum
%LCLop ENOSPC : -> _eerrno0e_Enum
%LCLop ESPIPE : -> _eerrno0e_Enum
%LCLop EROFS : -> _eerrno0e_Enum
%LCLop EMLINK : -> _eerrno0e_Enum
%LCLop EPIPE : -> _eerrno0e_Enum
%LCLop EDOM : -> _eerrno0e_Enum
%LCLop ERANGE : -> _eerrno0e_Enum
%LCLop EWOULDBLOCK : -> _eerrno0e_Enum
%LCLop EINPROGRESS : -> _eerrno0e_Enum
%LCLop EALREADY : -> _eerrno0e_Enum
%LCLop ENOTSOCK : -> _eerrno0e_Enum
%LCLop EDESTADDRREQ : -> _eerrno0e_Enum
%LCLop EMSGSIZE : -> _eerrno0e_Enum
%LCLop EPROTOTYPE : -> _eerrno0e_Enum
%LCLop ENOPROTOOPT : -> _eerrno0e_Enum
%LCLop [__, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __] :char, char, char, char, char, char, char, char, __char_Obj_Ptr, __char_Obj_Ptr, __char_Obj_Ptr, __char_Obj_Ptr, __char_Obj_Ptr, __char_Obj_Ptr, __char_Obj_Ptr, __char_Obj_Ptr, __char_Obj_Ptr, __char_Obj_Ptr -> _lconv_Struct_Tuple
%LCLop EPROTONOSUPPORT : -> _eerrno0e_Enum
%LCLop ESOCKTNOSUPPORT : -> _eerrno0e_Enum
%LCLop EOPNOTSUPP : -> _eerrno0e_Enum
%LCLop EPFNOSUPPORT : -> _eerrno0e_Enum
%LCLop EAFNOSUPPORT : -> _eerrno0e_Enum
%LCLop EADDRINUSE : -> _eerrno0e_Enum
%LCLop EADDRNOTAVAIL : -> _eerrno0e_Enum
%LCLop NIL : -> __char_Obj_Ptr
%LCLop NIL : -> __lconv_Struct_Ptr
%LCLop ENETDOWN : -> _eerrno0e_Enum
%LCLop ENETUNREACH : -> _eerrno0e_Enum
%LCLop ENETRESET : -> _eerrno0e_Enum
%LCLop ECONNABORTED : -> _eerrno0e_Enum
%LCLop ECONNRESET : -> _eerrno0e_Enum
%LCLop ENOBUFS : -> _eerrno0e_Enum
%LCLop EISCONN : -> _eerrno0e_Enum
%LCLop - __  :int -> int
%LCLop - __  :double -> double
%LCLop ENOTCONN : -> _eerrno0e_Enum
%LCLop __ + __  :__char_Obj_Ptr, int -> __char_Obj_Ptr
%LCLop __ + __  :int, __char_Obj_Ptr -> __char_Obj_Ptr
%LCLop __ + __  :int, int -> int
%LCLop __ + __  :double, double -> double
%LCLop __ + __  :__lconv_Struct_Ptr, int -> __lconv_Struct_Ptr
%LCLop __ + __  :int, __lconv_Struct_Ptr -> __lconv_Struct_Ptr
%LCLop ESHUTDOWN : -> _eerrno0e_Enum
%LCLop __ - __  :__char_Obj_Ptr, int -> __char_Obj_Ptr
%LCLop __ - __  :__char_Obj_Ptr, __char_Obj_Ptr -> int
%LCLop __ - __  :int, int -> int
%LCLop __ - __  :double, double -> double
%LCLop __ - __  :__lconv_Struct_Ptr, int -> __lconv_Struct_Ptr
%LCLop __ - __  :__lconv_Struct_Ptr, __lconv_Struct_Ptr -> int
%LCLop sizeof :bool -> int
%LCLop sizeof :int -> int
%LCLop sizeof :char -> int
%LCLop sizeof :void -> int
%LCLop sizeof :float -> int
%LCLop sizeof :double -> int
%LCLop sizeof :_eerrno0e_Enum -> int
%LCLop ETOOMANYREFS : -> _eerrno0e_Enum
%LCLop ETIMEDOUT : -> _eerrno0e_Enum
%LCLop ECONNREFUSED : -> _eerrno0e_Enum
%LCLop isSub :_char_Vec, int -> bool
%LCLop isSub :__char_Obj_Arr, int -> bool
%LCLop isSub :__lconv_Struct_Tuple_Vec, int -> bool
%LCLop isSub :__lconv_Struct_Arr, int -> bool
%LCLtag lconv struct
%LCLop ELOOP : -> _eerrno0e_Enum
%LCLop ENAMETOOLONG : -> _eerrno0e_Enum
%LCLop EHOSTDOWN : -> _eerrno0e_Enum
%LCLop EHOSTUNREACH : -> _eerrno0e_Enum
%LCLop ENOTEMPTY : -> _eerrno0e_Enum
%LCLop succ :int -> int
%LCLop EPROCLIM : -> _eerrno0e_Enum
%LCLop pred :int -> int
%LCLop EUSERS : -> _eerrno0e_Enum
%LCLop EDQUOT : -> _eerrno0e_Enum
%LCLop ESTALE : -> _eerrno0e_Enum
%LCLop abs :int -> int
%LCLop abs :double -> double
%LCLop EREMOTE : -> _eerrno0e_Enum
%LCLop div :int, int -> int
%LCLtype float float exposed
%LCLtype bool bool immutable
%LCLconst FALSE bool
%LCLconst TRUE bool
%LCLconst LC_ALL int
%LCLconst LC_COLLATE int
%LCLconst LC_CTYPE int
%LCLconst LC_NUMERIC int
%LCLconst LC_TIME int
%LCLconst LC_MONETARY int
%LCLtype __lconv ___lconv exposed
%LCLfcn localeconv :  -> __lconv_Struct_Ptr 
%LCLfcnGlobals 
%LCLfcn etlocale : int, __char_Obj_Ptr -> __char_Obj_Ptr 
%LCLfcnGlobals 
%LCLSymbolTableEnd
